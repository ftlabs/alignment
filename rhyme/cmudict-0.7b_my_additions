;;;
;;; These are some additional words it would be useful to have phonemed:
;;; 
NHS  EH1 N EY0 CH EH2 S
UK  Y UW1 K EY1
UK'S  Y UW1 K EY1 Z
FT  EH1 F T IY1
BREXIT  B R EH1 G Z IH0 T
GREXIT  G R EH1 G Z IH0 T
KELLAWAY  K EH1 L AH0 W EY2
KELLAWAY'S  K EH1 L AH0 W EY2 Z
BBC1  B IY1 B IY0 S IY0 W AH2 N
BBC2  B IY1 B IY0 S IY0 T UW2
BBC3  B IY1 B IY0 S IY0 W TH R IY2
BBC4  B IY1 B IY0 S IY0 W F AO2 R
EU  IY0 Y UW1
MP  EH1 M P IY0
MPS  EH1 M P IY0 Z
JEZWECAN  JH EH1 Z W IY0 K AE2 N
UKIP  Y UW1 K IH1 P
UKIP'S  Y UW1 K IH1 P S
;;;
;;; and now, bustin the format, to allow for some adjustment of the functionality
;;; Extension 1:
;;; When uppercasing a word to find a match in this dataset, we lose some crucial info.
;;; e.g. us and US both map to US, the variant meaning you and I, losing the country variant.
;;; Also, some words do not map directly to the relevant entry in the phoneme map, e.g. '%'.
;;; This list pre-emptively maps a word to the correct entry in the phoneme map.
MAP:US  US(1)
MAP:%  %PERCENT
MAP:UN  UN(1)
MAP:&  AND
MAP:BLOGGER'S  BLOGGERS
;;;
;;; Extension 2:
;;; The default regexp to identify a word in the text is (\w+), which will miss terms such as '%'.
;;; This list will be used to compile a more complex regexp to cover a wider range of possible words.
;;; WORD:NAME VALUE --> the VALUE is the regexp fragment to use. The NAME is ignored.
;;; NB: the default (\w+) will be invoked *after* all the WORD:... 
WORD:%  \%
WORD:'s  \w+['’][sStd]
WORD:'s  \w+['’](re|ve)
WORD:&  &
;;;
;;; Extension 3:
;;; This allows matched words to be transformed, e.g. to ensure the apostophe matches that used in the phoneme keys
;;; TRANSFORM:FROM  TO --> the text matching FROM will be transformed to TO.
;;; NB: the ToUpper step is invoked *after* all the TRANSFORM:... steps
TRANSFORM:(\w+)’([sStd])  $1'$2
TRANSFORM:(\w+)’(re|ve)  $1'$2